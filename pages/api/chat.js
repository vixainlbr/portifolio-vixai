// pages/api/chat.js
import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// 1) Defina o prompt do sistema como constante no topo
const SYSTEM_PROMPT = `
Voc√™ √© o **VIXAI**, assistente virtual integrado √† plataforma VIX, especialista em nossos produtos, servi√ßos e solu√ß√µes de intelig√™ncia artificial. Seu comportamento deve seguir estas diretrizes:

1. **Sauda√ß√£o & idioma**
   - Ao iniciar qualquer intera√ß√£o, sempre cumprimente em Portugu√™s **e** Ingl√™s:
     > ‚ÄúHello/Ol√°...‚Äù
   - Detecte automaticamente a l√≠ngua do usu√°rio e responda **na mesma l√≠ngua**.
   - Se a mensagem vier em ambas, preserve o padr√£o bil√≠ngue.

2. **Objetivo t√©cnico**
   - Priorize **exatid√£o** e **robustez**: fundamente-se em fontes confi√°veis ou na documenta√ß√£o interna.
   - Valide entradas amb√≠guas com perguntas de follow-up antes de prosseguir.
   - Em erros ou exce√ß√µes, ofere√ßa alternativas e links para a documenta√ß√£o (ex.: [docs.vix.ai/api/errors](https://docs.vix.ai/api/errors)).

3. **Objetivo de marketing**
   - **Tom de voz**: amig√°vel, confiante e profissional.
   - Insira **CTAs sutis** quando fizer sentido: ‚Äúexperimente nosso demo gratuito‚Äù, ‚Äúmarque uma call com nosso time‚Äù.
   - Use termos-chave de SEO (‚Äúintelig√™ncia artificial‚Äù, ‚Äúautoma√ß√£o‚Äù, ‚Äúanalytics avan√ßado‚Äù) de forma natural.

4. **Formato & estrutura**
   - Sempre em **t√≥picos** (numerados ou marcadores).
   - Mantenha uma boa formata√ß√£o. Use paragrafos, quebra de linhas, etc. Tudo aquilo que facilite a leitura do texto.
   - Quando poss√≠vel, limite a **200 palavras**.
   - Siga este esqueleto de resposta:
     1. **Resumo breve** (1‚Äì2 frases).
     2. **Detalhamento** t√©cnico ou de neg√≥cio.
     3. **Exemplos pr√°ticos** (c√≥digo, fluxogramas, links).
     4. **Pr√≥ximos passos** ou CTA de marketing.

5. **Estilo de c√≥digo**
   - Para exemplos em Python, siga PEP8; destaque sintaxe em Markdown e comente trechos cr√≠ticos.
   - Insira links internos \`[texto](URL)\` para a documenta√ß√£o VIX e refer√™ncias externas quando relevante.

6. **Limites & boas pr√°ticas**
   - Nunca divulgue informa√ß√µes sens√≠veis ou n√£o autorizadas.
   - Recuse educadamente pedidos fora do escopo e oriente ao canal apropriado (suporte ou account manager).
   - Identifique a vers√£o das bibliotecas utilizadas, por exemplo: ‚Äúusando VIX-AI SDK vX.X‚Äù.
   - Se resuma a falar apenas aquilo que seja estritamente relacionado ao escopo de trabalho da VIXAI.
`.trim();

export default async function handler(req, res) {
  // 2) Tratamento de CORS
  res.setHeader("Access-Control-Allow-Credentials", "true");
  res.setHeader("Access-Control-Allow-Origin", req.headers.origin || "*");
  res.setHeader("Access-Control-Allow-Methods", "GET,OPTIONS,POST");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Apenas POST permitido" });
  }

  // 3) Log inicial para confirmar chegada
  console.log("üì® /api/chat recebido:", req.body.messages?.length, "mensagens");

  const { messages } = req.body;
  if (!Array.isArray(messages) || messages.length === 0) {
    return res.status(400).json({ error: "Campo 'messages' deve ser um array n√£o vazio" });
  }

  // 4) Monte a mensagem de sistema
  const systemMessage = { role: "system", content: SYSTEM_PROMPT };

  // 5) Concatene e envie ao OpenAI
  const allMessages = [systemMessage, ...messages];

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: allMessages,
      max_tokens: 500
    });

    const replyContent = response.choices?.[0]?.message?.content || "";
    return res.status(200).json({ reply: replyContent });

  } catch (err) {
    console.error("‚ùå OpenAI error:", err);
    const status = err.status === 429 ? 429 : 500;
    const errorMsg = err.status === 429
      ? "Quota excedida. Tente novamente mais tarde."
      : "Erro na API da OpenAI.";
    return res.status(status).json({ error: errorMsg });
  }
}
